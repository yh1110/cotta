{"version":3,"sources":["../../scripts/main.ts","../../scripts/Utilities.ts"],"sourcesContent":["import {\n  world,\n  system,\n  BlockPermutation,\n  EntityInventoryComponent,\n  ItemStack,\n  DisplaySlotId,\n  ScoreboardObjective,\n  Dimension,\n  Entity,\n  Player,\n} from \"@minecraft/server\";\nimport Utilities from \"./Utilities.js\";\n\nconst START_TICK = 100;\nconst ARENA_X_SIZE = 30;\nconst ARENA_Z_SIZE = 30;\nconst ARENA_X_OFFSET = 0;\nconst ARENA_Y_OFFSET = -60;\nconst ARENA_Z_OFFSET = 0;\n\n// global variables\nlet curTick: number = 0;\nlet score = 0;\nlet cottaX = 0;\nlet cottaZ = 0;\nlet spawnCountdown = 1;\n\nfunction initializeBreakTheTerracotta() {\n  const overworld: Dimension = world.getDimension(\"overworld\");\n\n  let scoreObjective: ScoreboardObjective | undefined = world.scoreboard.getObjective(\"score\");\n\n  if (!scoreObjective) {\n    scoreObjective = world.scoreboard.addObjective(\"score\", \"Level\");\n  }\n\n  // eliminate pesky nearby mobs\n  let entities: Entity[] = overworld.getEntities({\n    excludeTypes: [\"player\"],\n  });\n\n  for (let entity of entities) {\n    entity.kill();\n  }\n\n  // set up scoreboard\n  world.scoreboard.setObjectiveAtDisplaySlot(DisplaySlotId.Sidebar, {\n    objective: scoreObjective,\n  });\n\n  const players: Player[] = world.getAllPlayers();\n\n  for (const player of players) {\n    scoreObjective.setScore(player, 0);\n\n    let inv: EntityInventoryComponent = player.getComponent(\"inventory\") as EntityInventoryComponent;\n    inv.container?.addItem(new ItemStack(\"diamond_sword\"));\n    inv.container?.addItem(new ItemStack(\"dirt\", 64));\n\n    player.teleport(\n      {\n        x: ARENA_X_OFFSET - 3,\n        y: ARENA_Y_OFFSET,\n        z: ARENA_Z_OFFSET - 3,\n      },\n      {\n        dimension: overworld,\n        rotation: { x: 0, y: 0 },\n      }\n    );\n  }\n\n  world.sendMessage(\"BREAK THE TERRACOTTA\");\n\n  let airBlockPerm = BlockPermutation.resolve(\"minecraft:air\");\n  let cobblestoneBlockPerm = BlockPermutation.resolve(\"minecraft:cobblestone\");\n\n  if (airBlockPerm) {\n    Utilities.fillBlock(\n      airBlockPerm,\n      ARENA_X_OFFSET - ARENA_X_SIZE / 2 + 1,\n      ARENA_Y_OFFSET,\n      ARENA_Z_OFFSET - ARENA_Z_SIZE / 2 + 1,\n      ARENA_X_OFFSET + ARENA_X_SIZE / 2 - 1,\n      ARENA_Y_OFFSET + 10,\n      ARENA_Z_OFFSET + ARENA_Z_SIZE / 2 - 1\n    );\n  }\n\n  if (cobblestoneBlockPerm) {\n    Utilities.fourWalls(\n      cobblestoneBlockPerm,\n      ARENA_X_OFFSET - ARENA_X_SIZE / 2,\n      ARENA_Y_OFFSET,\n      ARENA_Z_OFFSET - ARENA_Z_SIZE / 2,\n      ARENA_X_OFFSET + ARENA_X_SIZE / 2,\n      ARENA_Y_OFFSET + 10,\n      ARENA_Z_OFFSET + ARENA_Z_SIZE / 2\n    );\n  }\n}\n\nfunction gameTick() {\n  try {\n    curTick++;\n    if (curTick > START_TICK && curTick % 20 === 0) {\n      // no terracotta exists, and we're waiting to spawn a new one.\n      if (spawnCountdown > 0) {\n        spawnCountdown--;\n\n        if (spawnCountdown <= 0) {\n          spawnNewTerracotta();\n        }\n      } else {\n        checkForTerracotta();\n      }\n\n      const spawnInterval = Math.ceil(200 / ((score + 1) / 3));\n      if (curTick > START_TICK && curTick % spawnInterval === 0) {\n        spawnMobs();\n      }\n\n      if (curTick > START_TICK && curTick % 29 === 0) {\n        addFuzzyLeaves();\n      }\n    }\n\n    if (curTick === START_TICK) {\n      initializeBreakTheTerracotta();\n    }\n  } catch (e) {\n    console.warn(\"Tick error: \" + e);\n  }\n\n  system.run(gameTick);\n}\n\nfunction spawnNewTerracotta() {\n  const overworld = world.getDimension(\"overworld\");\n\n  // create new terracotta\n  cottaX = Math.floor(Math.random() * (ARENA_X_SIZE - 1)) - (ARENA_X_SIZE / 2 - 1);\n  cottaZ = Math.floor(Math.random() * (ARENA_Z_SIZE - 1)) - (ARENA_Z_SIZE / 2 - 1);\n\n  world.sendMessage(\"Creating new terracotta!\");\n  let block = overworld.getBlock({ x: cottaX + ARENA_X_OFFSET, y: 1 + ARENA_Y_OFFSET, z: cottaZ + ARENA_Z_OFFSET });\n\n  if (block) {\n    block.setPermutation(BlockPermutation.resolve(\"minecraft:yellow_glazed_terracotta\"));\n  }\n}\n\nfunction checkForTerracotta() {\n  const overworld = world.getDimension(\"overworld\");\n\n  let block = overworld.getBlock({ x: cottaX + ARENA_X_OFFSET, y: 1 + ARENA_Y_OFFSET, z: cottaZ + ARENA_Z_OFFSET });\n\n  if (block && !block.permutation.matches(\"minecraft:yellow_glazed_terracotta\")) {\n    // we didn't find the terracotta! set a new spawn countdown\n    score++;\n    spawnCountdown = 2;\n    cottaX = -1;\n\n    let players = world.getAllPlayers();\n\n    for (let player of players) {\n      player.runCommand(\"scoreboard players set @s score \" + score);\n    }\n\n    world.sendMessage(\"You broke the terracotta! Creating new terracotta in a few seconds.\");\n    cottaZ = -1;\n  }\n}\n\nfunction spawnMobs() {\n  const overworld = world.getDimension(\"overworld\");\n\n  // spawn mobs = create 1-2 mobs\n  let spawnMobCount = Math.floor(Math.random() * 2) + 1;\n\n  for (let j = 0; j < spawnMobCount; j++) {\n    let zombieX = Math.floor(Math.random() * (ARENA_X_SIZE - 2)) - ARENA_X_SIZE / 2;\n    let zombieZ = Math.floor(Math.random() * (ARENA_Z_SIZE - 2)) - ARENA_Z_SIZE / 2;\n\n    overworld.spawnEntity(\"minecraft:zombie\", {\n      x: zombieX + ARENA_X_OFFSET,\n      y: 1 + ARENA_Y_OFFSET,\n      z: zombieZ + ARENA_Z_OFFSET,\n    });\n  }\n}\n\nfunction addFuzzyLeaves() {\n  const overworld = world.getDimension(\"overworld\");\n\n  for (let i = 0; i < 10; i++) {\n    const leafX = Math.floor(Math.random() * (ARENA_X_SIZE - 1)) - (ARENA_X_SIZE / 2 - 1);\n    const leafY = Math.floor(Math.random() * 10);\n    const leafZ = Math.floor(Math.random() * (ARENA_Z_SIZE - 1)) - (ARENA_Z_SIZE / 2 - 1);\n\n    overworld\n      .getBlock({ x: leafX + ARENA_X_OFFSET, y: leafY + ARENA_Y_OFFSET, z: leafZ + ARENA_Z_OFFSET })\n      ?.setPermutation(BlockPermutation.resolve(\"minecraft:leaves\"));\n  }\n}\n\nsystem.run(gameTick);\n","import { world, BlockPermutation } from \"@minecraft/server\";\r\n\r\nexport default class Utilities {\r\n  static fillBlock(\r\n    blockPerm: BlockPermutation,\r\n    xFrom: number,\r\n    yFrom: number,\r\n    zFrom: number,\r\n    xTo: number,\r\n    yTo: number,\r\n    zTo: number\r\n  ) {\r\n    const overworld = world.getDimension(\"overworld\");\r\n\r\n    for (let i = xFrom; i <= xTo; i++) {\r\n      for (let j = yFrom; j <= yTo; j++) {\r\n        for (let k = zFrom; k <= zTo; k++) {\r\n          overworld.getBlock({ x: i, y: j, z: k })?.setPermutation(blockPerm);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  static fourWalls(\r\n    perm: BlockPermutation,\r\n    xFrom: number,\r\n    yFrom: number,\r\n    zFrom: number,\r\n    xTo: number,\r\n    yTo: number,\r\n    zTo: number\r\n  ) {\r\n    const overworld = world.getDimension(\"overworld\");\r\n\r\n    for (let i = xFrom; i <= xTo; i++) {\r\n      for (let k = yFrom; k <= yTo; k++) {\r\n        overworld.getBlock({ x: i, y: k, z: zFrom })?.setPermutation(perm);\r\n        overworld.getBlock({ x: i, y: k, z: zTo })?.setPermutation(perm);\r\n      }\r\n    }\r\n\r\n    for (let j = zFrom + 1; j < zTo; j++) {\r\n      for (let k = yFrom; k <= yTo; k++) {\r\n        overworld.getBlock({ x: xFrom, y: k, z: j })?.setPermutation(perm);\r\n        overworld.getBlock({ x: xTo, y: k, z: j })?.setPermutation(perm);\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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","names":["world","BlockPermutation","world","BlockPermutation"],"file":"../scripts/main.js"}